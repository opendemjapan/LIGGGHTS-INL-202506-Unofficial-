#########################################################################################
# title: in.dump_custom_vtk                                                             #
# version: 0.0.1                                                                        #
# date: Feb. 2014                                                                       #
# authors: Queteschiner, D.                                                             #
# e-mail: daniel.queteschiner@dcs-computing.com                                         #
# short description: liggghts-input file for testing dump custom/vtk                    #
#########################################################################################

variable    radius          equal   0.005
variable    volFrac         equal   0.65
variable    density         equal   700./${volFrac}
variable    skin            equal   0.5*${radius}

variable    cylRadius       equal   20.0*${radius} # cylinder radius; scale for geometry
variable    cylArea         equal   ${cylRadius}*${cylRadius}*PI

variable    desiredMass     equal   ${cylArea}*1.5*${cylRadius}*${volFrac}*${density}

variable    rmRegZPos       equal   1.5*${cylRadius}

# dimensions of simulation domain
variable    nx  equal   -1.1*${cylRadius}         # neg. x-value
variable    px  equal    1.1*${cylRadius}         # pos. x-value
variable    ny  equal   -1.1*${cylRadius}         # neg. y-value
variable    py  equal    1.1*${cylRadius}         # pos. y-value
variable    nz  equal   -1.0*${radius}            # neg. z-value
variable    pz  equal    4.0*${cylRadius}         # pos. z-value

# run & dump times
variable    dt              equal   1e-5
variable    nDump           equal   round(1e-2/${dt})
variable    nScreen         equal   round(1e-3/${dt})

atom_style  granular
atom_modify map array
boundary    f f f
newton      off

communicate single vel yes

units       si

# definition of the simulation region
region      reg block ${nx} ${px} ${ny} ${py} ${nz} ${pz} units box
create_box  2 reg

neighbor        ${skin} bin
neigh_modify    delay 0

fix         m1 all property/global youngsModulus peratomtype 5e6 5e6
fix         m2 all property/global poissonsRatio peratomtype 0.4 0.4
fix         m3 all property/global coefficientRestitution peratomtypepair 2 0.2 0.2 0.2 0.2
fix         m4 all property/global coefficientFriction peratomtypepair 2 0.5 0 0 0
fix         m5 all property/global coefficientRollingFriction peratomtypepair 2 0.1 0 0 0

# pair style
pair_style  gran model hertz tangential history rolling_friction cdt
pair_coeff  * *

# timestep and gravity
timestep    ${dt}

fix     gravi all gravity 9.81 vector 0.0 0.0 -1.0

# walls for particle insertion
fix     wCylinder all wall/gran model hertz tangential history rolling_friction cdt primitive type 1 zcylinder ${cylRadius} 0. 0.
fix     zplane1   all wall/gran model hertz tangential history rolling_friction cdt primitive type 1 zplane 0.0

fix fraction0 all particletemplate/sphere 999667 atom_type 1 density constant ${density} radius constant ${radius}

# particle distribution for insertion
fix pdd all particledistribution/discrete 999671 1 fraction0 1.0

# region and insertion
region  bc cylinder z 0.0 0.0 ${cylRadius} 0.0 ${pz} units box
fix ins all insert/pack seed 999683 distributiontemplate pdd maxattempt 100 insert_every once overlapcheck yes all_in yes &
        vel constant 0.0 0.0 -0.05 region bc mass_in_region ${desiredMass} ntry_mc 10000

# to test dumping of per-atom arrays of computes
compute displace all displace/atom 

#apply nve integration to all particles that are inserted as single particles
fix     integr all nve/sphere

# output settings, include total thermal energy
compute         rke all erotate/sphere
thermo_style    custom step atoms ke c_rke vol cpu
thermo          ${nScreen}
thermo_modify   lost ignore norm no

# --- runs ---

#insert the first particles so that dump is not empty
run     1

#dump    dmp all custom ${nDump} post/dump_pack_*proc.fill id type x y z ix iy iz vx vy vz fx fy fz &
#        omegax omegay omegaz radius c_displace[1] c_displace[2] c_displace[3] c_displace[4]

# dump as legacy VTK
dump    dmpvtk all custom/vtk ${nDump} post/dump*.vtk id type ix iy iz vx vy vz fx fy fz &
        omegax omegay omegaz radius c_displace[1] c_displace[2] c_displace[3] c_displace[4]

# dump as poly data XML
dump    dmpvtp all custom/vtk ${nDump} post/dump*.vtp id type ix iy iz vx vy vz fx fy fz &
        omegax omegay omegaz radius c_displace[1] c_displace[2] c_displace[3] c_displace[4]

# dump as unstructured grid XML
dump    dmpvtu all custom/vtk ${nDump} post/dump*.vtu id type ix iy iz vx vy vz fx fy fz &
        omegax omegay omegaz radius c_displace[1] c_displace[2] c_displace[3] c_displace[4]

#dump_modify dmpvtk binary yes # or 'no' for ascii
#dump_modify dmpvtp binary yes # or 'no' for ascii
#dump_modify dmpvtu binary yes # or 'no' for ascii

compute vave all reduce ave vx vy vz

variable vcmx equal vcm(all,x)
variable vcmy equal vcm(all,y)
variable vcmz equal vcm(all,z)

variable vave equal sqrt(v_vcmx*v_vcmx+v_vcmy*v_vcmy+v_vcmz*v_vcmz)
variable vthre equal 0.0045

run     ${nDump}

label loop
  print "-----> Checking Velocity..."
  if "${vave}<${vthre}" then "jump in.dump_custom_vtk endloop"
  print "-----> v ave ${vave}, v threshold ${vthre}, continuing run"
  run ${nDump}
  jump in.dump_custom_vtk loop
label endloop
print "-----> v ave ${vave}, v threshold ${vthre}, done"


